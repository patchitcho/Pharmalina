/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.0.9.0 (NJsonSchema v9.13.10.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IProductsClient {
    getAll(): Observable<SwaggerResponse<ProductsListViewModel | null>>;
    get(id: number): Observable<SwaggerResponse<ProductViewModel | null>>;
    create(command: CreateProductCommand): Observable<SwaggerResponse<ProductViewModel | null>>;
}

@Injectable({
    providedIn: 'root'
})
export class ProductsClient implements IProductsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    getAll(): Observable<SwaggerResponse<ProductsListViewModel | null>> {
        let url_ = this.baseUrl + "/api/Products/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<ProductsListViewModel | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<ProductsListViewModel | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<SwaggerResponse<ProductsListViewModel | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductsListViewModel.fromJS(resultData200, _mappings) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<ProductsListViewModel | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    get(id: number): Observable<SwaggerResponse<ProductViewModel | null>> {
        let url_ = this.baseUrl + "/api/Products/Get/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<ProductViewModel | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<ProductViewModel | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<SwaggerResponse<ProductViewModel | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductViewModel.fromJS(resultData200, _mappings) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<ProductViewModel | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    create(command: CreateProductCommand): Observable<SwaggerResponse<ProductViewModel | null>> {
        let url_ = this.baseUrl + "/api/Products/Create";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreate(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<ProductViewModel | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<ProductViewModel | null>>><any>_observableThrow(response_);
        }));
    }

    protected processCreate(response: HttpResponseBase): Observable<SwaggerResponse<ProductViewModel | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ProductViewModel.fromJS(resultData200, _mappings) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<ProductViewModel | null>>(new SwaggerResponse(status, _headers, <any>null));
    }
}

export interface IUsersClient {
    authenticate(userDto: UserDto): Observable<SwaggerResponse<FileResponse>>;
    register(command: CreateUserCommand): Observable<SwaggerResponse<UserViewModel | null>>;
    getAll(): Observable<SwaggerResponse<UsersListViewModel | null>>;
    getById(id: string | null): Observable<SwaggerResponse<UserViewModel | null>>;
    update(id: number, command: UpdateUserCommand): Observable<SwaggerResponse<UserDto | null>>;
    delete(id: number): Observable<SwaggerResponse<void>>;
}

@Injectable({
    providedIn: 'root'
})
export class UsersClient implements IUsersClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    authenticate(userDto: UserDto): Observable<SwaggerResponse<FileResponse>> {
        let url_ = this.baseUrl + "/api/Users/Authenticate/authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userDto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<FileResponse>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<FileResponse>>><any>_observableThrow(response_);
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<SwaggerResponse<FileResponse>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf(new SwaggerResponse(status, _headers, { fileName: fileName, data: <any>responseBlob, status: status, headers: _headers }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<FileResponse>>(new SwaggerResponse(status, _headers, <any>null));
    }

    register(command: CreateUserCommand): Observable<SwaggerResponse<UserViewModel | null>> {
        let url_ = this.baseUrl + "/api/Users/RegisterAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<UserViewModel | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<UserViewModel | null>>><any>_observableThrow(response_);
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<SwaggerResponse<UserViewModel | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserViewModel.fromJS(resultData200, _mappings) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<UserViewModel | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getAll(): Observable<SwaggerResponse<UsersListViewModel | null>> {
        let url_ = this.baseUrl + "/api/Users/GetAll";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<UsersListViewModel | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<UsersListViewModel | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<SwaggerResponse<UsersListViewModel | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UsersListViewModel.fromJS(resultData200, _mappings) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<UsersListViewModel | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    getById(id: string | null): Observable<SwaggerResponse<UserViewModel | null>> {
        let url_ = this.baseUrl + "/api/Users/GetByIdAsync/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetById(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<UserViewModel | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<UserViewModel | null>>><any>_observableThrow(response_);
        }));
    }

    protected processGetById(response: HttpResponseBase): Observable<SwaggerResponse<UserViewModel | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserViewModel.fromJS(resultData200, _mappings) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<UserViewModel | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    update(id: number, command: UpdateUserCommand): Observable<SwaggerResponse<UserDto | null>> {
        let url_ = this.baseUrl + "/api/Users/Update/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdate(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<UserDto | null>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<UserDto | null>>><any>_observableThrow(response_);
        }));
    }

    protected processUpdate(response: HttpResponseBase): Observable<SwaggerResponse<UserDto | null>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        let _mappings: { source: any, target: any }[] = [];
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : jsonParse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserDto.fromJS(resultData200, _mappings) : <any>null;
            return _observableOf(new SwaggerResponse(status, _headers, result200));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<UserDto | null>>(new SwaggerResponse(status, _headers, <any>null));
    }

    delete(id: number): Observable<SwaggerResponse<void>> {
        let url_ = this.baseUrl + "/api/Users/Delete/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<SwaggerResponse<void>>><any>_observableThrow(e);
                }
            } else
                return <Observable<SwaggerResponse<void>>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<SwaggerResponse<void>> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, <any>null));
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SwaggerResponse<void>>(new SwaggerResponse(status, _headers, <any>null));
    }
}

export class ProductsListViewModel implements IProductsListViewModel {
    products?: ProductDto[] | undefined;

    constructor(data?: IProductsListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.products) {
                this.products = [];
                for (let i = 0; i < data.products.length; i++) {
                    let item = data.products[i];
                    this.products[i] = item && !(<any>item).toJSON ? new ProductDto(item) : <ProductDto>item;
                }
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            if (data["products"] && data["products"].constructor === Array) {
                this.products = [];
                for (let item of data["products"])
                    this.products.push(ProductDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): ProductsListViewModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ProductsListViewModel>(data, _mappings, ProductsListViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.products && this.products.constructor === Array) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IProductsListViewModel {
    products?: IProductDto[] | undefined;
}

export class ProductDto implements IProductDto {
    productId?: number;
    code?: string | undefined;
    reference?: string | undefined;
    designation?: string | undefined;
    remarque?: string | undefined;

    constructor(data?: IProductDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.productId = data["productId"];
            this.code = data["code"];
            this.reference = data["reference"];
            this.designation = data["designation"];
            this.remarque = data["remarque"];
        }
    }

    static fromJS(data: any, _mappings?: any): ProductDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<ProductDto>(data, _mappings, ProductDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["code"] = this.code;
        data["reference"] = this.reference;
        data["designation"] = this.designation;
        data["remarque"] = this.remarque;
        return data; 
    }
}

export interface IProductDto {
    productId?: number;
    code?: string | undefined;
    reference?: string | undefined;
    designation?: string | undefined;
    remarque?: string | undefined;
}

export class ProductViewModel implements IProductViewModel {
    productId?: number;
    code?: string | undefined;
    reference?: string | undefined;
    designation?: string | undefined;
    remarque?: string | undefined;
    editEnabled?: boolean;
    deleteEnabled?: boolean;

    constructor(data?: IProductViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.productId = data["productId"];
            this.code = data["code"];
            this.reference = data["reference"];
            this.designation = data["designation"];
            this.remarque = data["remarque"];
            this.editEnabled = data["editEnabled"];
            this.deleteEnabled = data["deleteEnabled"];
        }
    }

    static fromJS(data: any, _mappings?: any): ProductViewModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<ProductViewModel>(data, _mappings, ProductViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productId"] = this.productId;
        data["code"] = this.code;
        data["reference"] = this.reference;
        data["designation"] = this.designation;
        data["remarque"] = this.remarque;
        data["editEnabled"] = this.editEnabled;
        data["deleteEnabled"] = this.deleteEnabled;
        return data; 
    }
}

export interface IProductViewModel {
    productId?: number;
    code?: string | undefined;
    reference?: string | undefined;
    designation?: string | undefined;
    remarque?: string | undefined;
    editEnabled?: boolean;
    deleteEnabled?: boolean;
}

export class CreateProductCommand implements ICreateProductCommand {
    code?: string | undefined;
    reference?: string | undefined;
    designation?: string | undefined;
    remarque?: string | undefined;

    constructor(data?: ICreateProductCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.code = data["code"];
            this.reference = data["reference"];
            this.designation = data["designation"];
            this.remarque = data["remarque"];
        }
    }

    static fromJS(data: any, _mappings?: any): CreateProductCommand {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateProductCommand>(data, _mappings, CreateProductCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["reference"] = this.reference;
        data["designation"] = this.designation;
        data["remarque"] = this.remarque;
        return data; 
    }
}

export interface ICreateProductCommand {
    code?: string | undefined;
    reference?: string | undefined;
    designation?: string | undefined;
    remarque?: string | undefined;
}

export class UserDto implements IUserDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.username = data["username"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any, _mappings?: any): UserDto {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserDto>(data, _mappings, UserDto);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["username"] = this.username;
        data["password"] = this.password;
        return data; 
    }
}

export interface IUserDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
}

export class UserViewModel implements IUserViewModel {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    passwordHash?: string | undefined;
    passwordSalt?: string | undefined;

    constructor(data?: IUserViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.id = data["id"];
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.username = data["username"];
            this.passwordHash = data["passwordHash"];
            this.passwordSalt = data["passwordSalt"];
        }
    }

    static fromJS(data: any, _mappings?: any): UserViewModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<UserViewModel>(data, _mappings, UserViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["username"] = this.username;
        data["passwordHash"] = this.passwordHash;
        data["passwordSalt"] = this.passwordSalt;
        return data; 
    }
}

export interface IUserViewModel {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    username?: string | undefined;
    passwordHash?: string | undefined;
    passwordSalt?: string | undefined;
}

export class CreateUserCommand implements ICreateUserCommand {
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;

    constructor(data?: ICreateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.firstName = data["firstName"];
            this.lastName = data["lastName"];
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any, _mappings?: any): CreateUserCommand {
        data = typeof data === 'object' ? data : {};
        return createInstance<CreateUserCommand>(data, _mappings, CreateUserCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }
}

export interface ICreateUserCommand {
    firstName?: string | undefined;
    lastName?: string | undefined;
    userName?: string | undefined;
    password?: string | undefined;
}

export class UsersListViewModel implements IUsersListViewModel {
    users?: UserDto[] | undefined;

    constructor(data?: IUsersListViewModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.users) {
                this.users = [];
                for (let i = 0; i < data.users.length; i++) {
                    let item = data.users[i];
                    this.users[i] = item && !(<any>item).toJSON ? new UserDto(item) : <UserDto>item;
                }
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            if (data["users"] && data["users"].constructor === Array) {
                this.users = [];
                for (let item of data["users"])
                    this.users.push(UserDto.fromJS(item, _mappings));
            }
        }
    }

    static fromJS(data: any, _mappings?: any): UsersListViewModel {
        data = typeof data === 'object' ? data : {};
        return createInstance<UsersListViewModel>(data, _mappings, UsersListViewModel);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.users && this.users.constructor === Array) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUsersListViewModel {
    users?: IUserDto[] | undefined;
}

export class UpdateUserCommand implements IUpdateUserCommand {
    id?: number;
    firstname?: string | undefined;
    lastname?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: IUpdateUserCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.id = data["id"];
            this.firstname = data["firstname"];
            this.lastname = data["lastname"];
            this.username = data["username"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any, _mappings?: any): UpdateUserCommand {
        data = typeof data === 'object' ? data : {};
        return createInstance<UpdateUserCommand>(data, _mappings, UpdateUserCommand);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstname"] = this.firstname;
        data["lastname"] = this.lastname;
        data["username"] = this.username;
        data["password"] = this.password;
        return data; 
    }
}

export interface IUpdateUserCommand {
    id?: number;
    firstname?: string | undefined;
    lastname?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}

export class SwaggerResponse<TResult> {
    status: number;
    headers: { [key: string]: any; };
    result: TResult;
        
    constructor(status: number, headers: { [key: string]: any; }, result: TResult) 
    {
        this.status = status;
        this.headers = headers;
        this.result = result;
    }
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}